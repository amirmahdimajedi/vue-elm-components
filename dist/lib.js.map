{"version":3,"file":"lib.js","sources":["../src/elm.vue"],"sourcesContent":["<script>\nexport default {\n  props: {\n    src:   { type: Object   , required: true  },\n    ports: { type: Function , required: false },\n    flags: { type: Object   , required: false , default: {} },\n  },\n  render(h) {\n    return (<div>\n      <div ref=\"placeholder\"></div>\n    </div>)\n  },\n  mounted() {\n\n    const {\n      $el,\n      $refs: { placeholder },\n      ports,\n      flags,\n      src\n    } = this\n\n    const main = src && src.Main\n\n    let app;\n\n    if (main.embed) {\n\n      /* Elm 0.18 */\n\n      app = main.embed($el, flags);\n\n    }\n    else if (main.init) {\n\n      /* Elm 0.19 */\n\n      /*\n      ** Note that Elm 0.19 doesn't treat `node` as a container, but rather as a placeholder.\n      ** The Elm App will replace the provided node, rather than mount itself within the provided node.\n      ** This can cause runtime errors when unmounting this Vue component.\n      ** The workaround is to use an extra <div>, which the virtual DOM doesn't directly control, and allow Elm to replace that node.\n      */\n\n      app = main.init({\n        node: placeholder,\n        flags\n      });\n\n    }\n\n    if (app && (typeof ports !== \"undefined\")) {\n      ports(app.ports);\n    }\n\n  }\n};\n</script>"],"names":["props","src","type","Object","required","ports","Function","flags","default","render","h","ref","mounted","app","this","main","Main","embed","$el","init","node","placeholder"],"mappings":"AACA,WAAe,CACbA,MAAO,CACLC,IAAO,CAAEC,KAAMC,OAAWC,UAAU,GACpCC,MAAO,CAAEH,KAAMI,SAAWF,UAAU,GACpCG,MAAO,CAAEL,KAAMC,OAAWC,UAAU,EAAQI,QAAS,KAEvDC,gBAAOC,GACL,OAAQA,aACNA,SAAKC,IAAI,kBAGbC,uBAYMC,IAJAC,+DAEEC,EAAOd,GAAOA,EAAIe,KAIpBD,EAAKE,MAIPJ,EAAME,EAAKE,MAAMC,EAAKX,GAGfQ,EAAKI,OAWZN,EAAME,EAAKI,KAAK,CACdC,KAAMC,QACNd,KAKAM,QAAyB,IAAVR,GACjBA,EAAMQ,EAAIR"}